// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/runtime"
	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Status.
var (
	UnknownStatus = Status{}

	StatusActive = Status{"active"}

	StatusInactive = Status{"inactive"}
)

// Application defines model for Application.
type Application struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// BasicCreationResponse defines model for BasicCreationResponse.
type BasicCreationResponse struct {
	Feedback string `json:"feedback"`
	ID       string `json:"id"`
}

// BasicResponse defines model for BasicResponse.
type BasicResponse struct {
	Feedback string `json:"feedback"`
}

// Error defines model for Error.
type Error struct {
	Feedback string `json:"feedback"`
}

// Group defines model for Group.
type Group struct {
	ID   string `json:"id"`
	Name string `json:"name"`

	// Este objeto é composto pela definição de permissões onde a chave é o identificador do recurso e o valor é o número da permissão
	Permissions map[string]interface{} `json:"permissions"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Feedback string `json:"feedback"`
}

// LoginCredentials defines model for LoginCredentials.
type LoginCredentials struct {
	Application string              `json:"application" validate:"required"`
	Email       openapi_types.Email `json:"email" validate:"required"`
	Password    string              `json:"password" validate:"required,min=8,max=32"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Feedback string `json:"feedback"`
	Token    string `json:"token"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	Name string `json:"name" validate:"required"`
}

// NewGroup defines model for NewGroup.
type NewGroup struct {
	Name string `json:"name" validate:"required,min=3"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    openapi_types.Email `json:"email" validate:"required,email"`
	Name     string              `json:"name" validate:"required,min=3"`
	Password string              `json:"password" validate:"required,min=8,max=32"`
}

// NewUserStatus defines model for NewUserStatus.
type NewUserStatus struct {
	Status Status `json:"status"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	Feedback string `json:"feedback"`
}

// User defines model for User.
type User struct {
	Email  openapi_types.Email `json:"email"`
	Name   string              `json:"name"`
	Status Status              `json:"status"`
}

// N400 defines model for 400.
type N400 Error

// N401 defines model for 401.
type N401 Unauthorized

// N500 defines model for 500.
type N500 InternalServerError

// Status defines model for Status.
type Status struct {
	value string
}

func (t *Status) ToValue() string {
	return t.value
}
func (t Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *Status) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *Status) FromValue(value string) error {
	switch value {

	case StatusActive.value:
		t.value = value
		return nil

	case StatusInactive.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// PostApplicationsJSONBody defines parameters for PostApplications.
type PostApplicationsJSONBody NewApplication

// PostApplicationsIDGroupsJSONBody defines parameters for PostApplicationsIDGroups.
type PostApplicationsIDGroupsJSONBody NewGroup

// PostApplicationsIDLoginJSONBody defines parameters for PostApplicationsIDLogin.
type PostApplicationsIDLoginJSONBody LoginCredentials

// PostApplicationsIDUsersJSONBody defines parameters for PostApplicationsIDUsers.
type PostApplicationsIDUsersJSONBody NewUser

// PatchApplicationsIDUsersByEmailJSONBody defines parameters for PatchApplicationsIDUsersByEmail.
type PatchApplicationsIDUsersByEmailJSONBody NewUserStatus

// PostApplicationsJSONRequestBody defines body for PostApplications for application/json ContentType.
type PostApplicationsJSONRequestBody PostApplicationsJSONBody

// Bind implements render.Binder.
func (PostApplicationsJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostApplicationsIDGroupsJSONRequestBody defines body for PostApplicationsIDGroups for application/json ContentType.
type PostApplicationsIDGroupsJSONRequestBody PostApplicationsIDGroupsJSONBody

// Bind implements render.Binder.
func (PostApplicationsIDGroupsJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostApplicationsIDLoginJSONRequestBody defines body for PostApplicationsIDLogin for application/json ContentType.
type PostApplicationsIDLoginJSONRequestBody PostApplicationsIDLoginJSONBody

// Bind implements render.Binder.
func (PostApplicationsIDLoginJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostApplicationsIDUsersJSONRequestBody defines body for PostApplicationsIDUsers for application/json ContentType.
type PostApplicationsIDUsersJSONRequestBody PostApplicationsIDUsersJSONBody

// Bind implements render.Binder.
func (PostApplicationsIDUsersJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PatchApplicationsIDUsersByEmailJSONRequestBody defines body for PatchApplicationsIDUsersByEmail for application/json ContentType.
type PatchApplicationsIDUsersByEmailJSONRequestBody PatchApplicationsIDUsersByEmailJSONBody

// Bind implements render.Binder.
func (PatchApplicationsIDUsersByEmailJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// GetApplicationsJSON200Response is a constructor method for a GetApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsJSON200Response(body []Application) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetApplicationsJSON401Response is a constructor method for a GetApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetApplicationsJSON500Response is a constructor method for a GetApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PostApplicationsJSON201Response is a constructor method for a PostApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsJSON201Response(body BasicCreationResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostApplicationsJSON400Response is a constructor method for a PostApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostApplicationsJSON401Response is a constructor method for a PostApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// PostApplicationsJSON500Response is a constructor method for a PostApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// GetApplicationsIDJSON200Response is a constructor method for a GetApplicationsID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDJSON200Response(body Application) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetApplicationsIDJSON400Response is a constructor method for a GetApplicationsID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// GetApplicationsIDJSON401Response is a constructor method for a GetApplicationsID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetApplicationsIDJSON500Response is a constructor method for a GetApplicationsID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// GetApplicationsIDGroupsJSON200Response is a constructor method for a GetApplicationsIDGroups response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDGroupsJSON200Response(body []Group) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetApplicationsIDGroupsJSON400Response is a constructor method for a GetApplicationsIDGroups response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDGroupsJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// GetApplicationsIDGroupsJSON401Response is a constructor method for a GetApplicationsIDGroups response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDGroupsJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetApplicationsIDGroupsJSON500Response is a constructor method for a GetApplicationsIDGroups response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDGroupsJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PostApplicationsIDGroupsJSON201Response is a constructor method for a PostApplicationsIDGroups response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDGroupsJSON201Response(body BasicCreationResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostApplicationsIDGroupsJSON400Response is a constructor method for a PostApplicationsIDGroups response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDGroupsJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostApplicationsIDGroupsJSON401Response is a constructor method for a PostApplicationsIDGroups response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDGroupsJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// PostApplicationsIDGroupsJSON500Response is a constructor method for a PostApplicationsIDGroups response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDGroupsJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PostApplicationsIDLoginJSON200Response is a constructor method for a PostApplicationsIDLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDLoginJSON200Response(body LoginResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostApplicationsIDLoginJSON400Response is a constructor method for a PostApplicationsIDLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDLoginJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostApplicationsIDLoginJSON401Response is a constructor method for a PostApplicationsIDLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDLoginJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// PostApplicationsIDLoginJSON500Response is a constructor method for a PostApplicationsIDLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDLoginJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// GetApplicationsIDUsersJSON200Response is a constructor method for a GetApplicationsIDUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDUsersJSON200Response(body []User) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetApplicationsIDUsersJSON400Response is a constructor method for a GetApplicationsIDUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDUsersJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// GetApplicationsIDUsersJSON401Response is a constructor method for a GetApplicationsIDUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDUsersJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetApplicationsIDUsersJSON500Response is a constructor method for a GetApplicationsIDUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsIDUsersJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PostApplicationsIDUsersJSON201Response is a constructor method for a PostApplicationsIDUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDUsersJSON201Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostApplicationsIDUsersJSON400Response is a constructor method for a PostApplicationsIDUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDUsersJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostApplicationsIDUsersJSON401Response is a constructor method for a PostApplicationsIDUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDUsersJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// PostApplicationsIDUsersJSON500Response is a constructor method for a PostApplicationsIDUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDUsersJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PatchApplicationsIDUsersByEmailJSON200Response is a constructor method for a PatchApplicationsIDUsersByEmail response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchApplicationsIDUsersByEmailJSON200Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PatchApplicationsIDUsersByEmailJSON400Response is a constructor method for a PatchApplicationsIDUsersByEmail response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchApplicationsIDUsersByEmailJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PatchApplicationsIDUsersByEmailJSON401Response is a constructor method for a PatchApplicationsIDUsersByEmail response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchApplicationsIDUsersByEmailJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// PatchApplicationsIDUsersByEmailJSON500Response is a constructor method for a PatchApplicationsIDUsersByEmail response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchApplicationsIDUsersByEmailJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lista todas as aplicações
	// (GET /applications)
	GetApplications(w http.ResponseWriter, r *http.Request) *Response
	// Cadastra uma aplicação
	// (POST /applications)
	PostApplications(w http.ResponseWriter, r *http.Request) *Response
	// Todas as informações de uma aplicação
	// (GET /applications/{id})
	GetApplicationsID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Lista os grupos de permissões de uma aplicação
	// (GET /applications/{id}/groups)
	GetApplicationsIDGroups(w http.ResponseWriter, r *http.Request, id string) *Response
	// Cadastra um novo grupo de permissões de uma aplicação
	// (POST /applications/{id}/groups)
	PostApplicationsIDGroups(w http.ResponseWriter, r *http.Request, id string) *Response
	// Autentica usuário
	// (POST /applications/{id}/login)
	PostApplicationsIDLogin(w http.ResponseWriter, r *http.Request, id string) *Response
	// Lista os usuários de uma aplicação
	// (GET /applications/{id}/users)
	GetApplicationsIDUsers(w http.ResponseWriter, r *http.Request, id string) *Response
	// Cadastra um novo usuário
	// (POST /applications/{id}/users)
	PostApplicationsIDUsers(w http.ResponseWriter, r *http.Request, id string) *Response
	// Atualiza o status de um usuário
	// (PATCH /applications/{id}/users/{byEmail})
	PatchApplicationsIDUsersByEmail(w http.ResponseWriter, r *http.Request, id string, byEmail openapi_types.Email) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// GetApplications operation middleware
func (siw *ServerInterfaceWrapper) GetApplications(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetApplications(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostApplications operation middleware
func (siw *ServerInterfaceWrapper) PostApplications(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostApplications(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetApplicationsID operation middleware
func (siw *ServerInterfaceWrapper) GetApplicationsID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetApplicationsID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetApplicationsIDGroups operation middleware
func (siw *ServerInterfaceWrapper) GetApplicationsIDGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetApplicationsIDGroups(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostApplicationsIDGroups operation middleware
func (siw *ServerInterfaceWrapper) PostApplicationsIDGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostApplicationsIDGroups(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostApplicationsIDLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApplicationsIDLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostApplicationsIDLogin(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetApplicationsIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetApplicationsIDUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetApplicationsIDUsers(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostApplicationsIDUsers operation middleware
func (siw *ServerInterfaceWrapper) PostApplicationsIDUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostApplicationsIDUsers(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PatchApplicationsIDUsersByEmail operation middleware
func (siw *ServerInterfaceWrapper) PatchApplicationsIDUsersByEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	// ------------- Path parameter "byEmail" -------------
	var byEmail openapi_types.Email

	if err := runtime.BindStyledParameter("simple", false, "byEmail", chi.URLParam(r, "byEmail"), &byEmail); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "byEmail"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PatchApplicationsIDUsersByEmail(w, r, id, byEmail)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/applications", wrapper.GetApplications)
		r.Post("/applications", wrapper.PostApplications)
		r.Get("/applications/{id}", wrapper.GetApplicationsID)
		r.Get("/applications/{id}/groups", wrapper.GetApplicationsIDGroups)
		r.Post("/applications/{id}/groups", wrapper.PostApplicationsIDGroups)
		r.Post("/applications/{id}/login", wrapper.PostApplicationsIDLogin)
		r.Get("/applications/{id}/users", wrapper.GetApplicationsIDUsers)
		r.Post("/applications/{id}/users", wrapper.PostApplicationsIDUsers)
		r.Patch("/applications/{id}/users/{byEmail}", wrapper.PatchApplicationsIDUsersByEmail)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZwW7bOBN+FYL/f1Rqt+kCCwM9OGk2yKIogk2CPaQ5TMSxzUYitSTlxAn0MIsein2A",
	"XvbqF1uQlGXJkWw5cRqnBYpWpqjhN5yP38ywdzSUcSIFCqNp744q1IkUGt2Pt92u/SeUwqAw9hGSJOIh",
	"GC5F57OWwo7pcIQx2Kf/KxzQHv1fZ26z49/qzoFSUtEsywLKUIeKJ9YI7dE9YEThXylqQ7OAvu2+3tia",
	"ZwJSM5KK3yKrW7r6PqC/bNDfI2FQCYhOUI1RNXo/m0b8PDKbGOTLuDj05ygcKMa4fYboWMkEleE2XAOI",
	"NAY0KQ3dUc7s3wOpYjC0R9OUMxpQM0mQ9qg2iouhdVxAjHbiwossoDYyXCGjvXPqvnVTLwob8vIzhi5w",
	"e6B5uK/Qwfwjp9GacAeI7BLCqxosQTtf6iAXVhthbx7uAo6lEHzMn2XpQyXT5LtyKqAJqphrzaVw5qrn",
	"4UAbJBafkWT6D3EHSxtJEoyAMBxwwadfp18kYUhyQ9NvqIkUDAmQcARjtB9KwhkKwwc8BCYVYZIoDFOl",
	"JUEiyRgiqfw8Mf03RiUJg8LgF0nv7VXjWag6VLfJdVLwLNH+IIdc7Ct0OwORXhMFVGVoOQMCerMzlDt4",
	"YxTsGBg6C2OIOANjpxWgrQcYA48qNv3Io4wmoPW1VFW2FoMPNR3EXLz7NYjh5t3uG6/o5f0v71FQeFGs",
	"2hiVpxBMI69QrKaMn7ZCJj/i9cOzUL0UrBHMBcSNOegjXj9E0R6HzzFitwFlUGbEEWtCfaZxXU3Y9JkJ",
	"/OdZo3SvvR/PdATzfW919vKtPzFg0nXlUBcfLasDc9OLIPOP6zDNwaBIYycqoeFj6xMX+eNFTcKtVLPP",
	"kl+ekMXLCopHBWKBLY1xsevYAoKbyYm16OFfIihU/dSM5r9+m3ny+5+nNK/jrSX/du7ZyJjEs5eLgawr",
	"hRIMXQEz/epqHAakf3xEElBAJLFR2EHB7DA4ifGF0Sdq4dgMH4KR6hN9ZZfkJrJrVl7RgI5Rab/a61fd",
	"V127mzJBAQmnPbrrhuwJMiPnbaekZW5giK5LsgGdCVyPHqLpl+cF1abyzZpNFjcYrwxuOTdlxQ6DUjCp",
	"67o+cG1sOTnfuG+oS91n3VKFEx07ad4tLp9rJ5W5Q3vnVdacX2QXAdVpHIOaFNCMZKCJ/VMGGFCvipUy",
	"Q9MLq7RS14TiWOr7sXCt9p5kk431ugvFwYIiG5Vido8Em+vy6xvPul77/eJZCYGBNgoY+OB32wS/ux1E",
	"2c+xkzSuONXMkiyonuDOHWdZ22N89N4pgYIYDSrt4HHh0rkZzXqhnu+LqrEPSnFc2TW2rADc55ndkEdp",
	"S2tJqbu4cb7MpbkcghdHptOZ3vCqW/hIdnWGthzX7Ul26Of/eFRrlcZ889I6gQ1Vmki9cBXy8sjnnZG6",
	"3p/lJMz51T4FbjvFniQ757za4rwsffDnGVm+6IxMhBzPXHoQnevVNJJD7iLQluvubunnofq9C85WlO9u",
	"dv1lVD+VVyhc45Ea34dtWcFQkLk/A0hSnU7/VrxMU43uuruRp6l2TGub9M/c9J8057tLk3V61lk8XnKm",
	"L3xYLoeeR+sk962m0pPkds+fZ0jtq1P6LMo/Vlav0cMZT5eoYefucnIQA49cx52ACUc1fLbDNYTe859u",
	"Ia+DWgyXBd4WQDb03xZPfMSK6+PvWlCsPGjunRXVMdzyF3iL1TcpRPwWiCT+6t0nhKWHLMv+CwAA//8m",
	"71uktiQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
