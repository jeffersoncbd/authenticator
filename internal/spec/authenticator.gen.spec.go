// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/runtime"
	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for UserStatus.
var (
	UnknownUserStatus = UserStatus{}

	UserStatusActive = UserStatus{"active"}

	UserStatusInactive = UserStatus{"inactive"}
)

// Application defines model for Application.
type Application struct {
	ID   string   `json:"id"`
	Keys []string `json:"keys"`
	Name string   `json:"name"`
}

// BasicResponse defines model for BasicResponse.
type BasicResponse struct {
	Feedback string `json:"feedback"`
}

// Credentials defines model for Credentials.
type Credentials struct {
	Application string              `json:"application" validate:"required"`
	Email       openapi_types.Email `json:"email" validate:"required"`
	Password    string              `json:"password" validate:"required,min=8,max=32"`
}

// Error defines model for Error.
type Error struct {
	Feedback string `json:"feedback"`
}

// InsertKeys defines model for InsertKeys.
type InsertKeys struct {
	NewKeys []string `json:"newKeys" validate:"required"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Feedback string `json:"feedback"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Feedback string `json:"feedback"`
	Token    string `json:"token"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	Name string `json:"name" validate:"required"`
}

// NewApplicationResponse defines model for NewApplicationResponse.
type NewApplicationResponse struct {
	Feedback string `json:"feedback"`
	ID       string `json:"id"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    openapi_types.Email `json:"email" validate:"required,email"`
	Name     string              `json:"name" validate:"required,min=3"`
	Password string              `json:"password" validate:"required,min=8,max=32"`
}

// PatchUserStatus defines model for PatchUserStatus.
type PatchUserStatus struct {
	Status UserStatus `json:"status"`
}

// RemoveKey defines model for RemoveKey.
type RemoveKey struct {
	Key string `json:"key" validate:"required"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	Feedback string `json:"feedback"`
}

// User defines model for User.
type User struct {
	Email  openapi_types.Email `json:"email"`
	Name   string              `json:"name"`
	Status UserStatus          `json:"status"`
}

// UserStatus defines model for UserStatus.
type UserStatus struct {
	value string
}

func (t *UserStatus) ToValue() string {
	return t.value
}
func (t UserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *UserStatus) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *UserStatus) FromValue(value string) error {
	switch value {

	case UserStatusActive.value:
		t.value = value
		return nil

	case UserStatusInactive.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// PostApplicationsJSONBody defines parameters for PostApplications.
type PostApplicationsJSONBody NewApplication

// DeleteApplicationsIDKeysJSONBody defines parameters for DeleteApplicationsIDKeys.
type DeleteApplicationsIDKeysJSONBody RemoveKey

// PostApplicationsIDKeysJSONBody defines parameters for PostApplicationsIDKeys.
type PostApplicationsIDKeysJSONBody InsertKeys

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody Credentials

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody NewUser

// PatchUsersByEmailJSONBody defines parameters for PatchUsersByEmail.
type PatchUsersByEmailJSONBody PatchUserStatus

// PostApplicationsJSONRequestBody defines body for PostApplications for application/json ContentType.
type PostApplicationsJSONRequestBody PostApplicationsJSONBody

// Bind implements render.Binder.
func (PostApplicationsJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// DeleteApplicationsIDKeysJSONRequestBody defines body for DeleteApplicationsIDKeys for application/json ContentType.
type DeleteApplicationsIDKeysJSONRequestBody DeleteApplicationsIDKeysJSONBody

// Bind implements render.Binder.
func (DeleteApplicationsIDKeysJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostApplicationsIDKeysJSONRequestBody defines body for PostApplicationsIDKeys for application/json ContentType.
type PostApplicationsIDKeysJSONRequestBody PostApplicationsIDKeysJSONBody

// Bind implements render.Binder.
func (PostApplicationsIDKeysJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// Bind implements render.Binder.
func (PostLoginJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// Bind implements render.Binder.
func (PostUsersJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PatchUsersByEmailJSONRequestBody defines body for PatchUsersByEmail for application/json ContentType.
type PatchUsersByEmailJSONRequestBody PatchUsersByEmailJSONBody

// Bind implements render.Binder.
func (PatchUsersByEmailJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// GetApplicationsJSON200Response is a constructor method for a GetApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsJSON200Response(body []Application) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetApplicationsJSON401Response is a constructor method for a GetApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetApplicationsJSON500Response is a constructor method for a GetApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func GetApplicationsJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PostApplicationsJSON201Response is a constructor method for a PostApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsJSON201Response(body NewApplicationResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostApplicationsJSON400Response is a constructor method for a PostApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostApplicationsJSON401Response is a constructor method for a PostApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// PostApplicationsJSON500Response is a constructor method for a PostApplications response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// DeleteApplicationsIDKeysJSON200Response is a constructor method for a DeleteApplicationsIDKeys response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteApplicationsIDKeysJSON200Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// DeleteApplicationsIDKeysJSON400Response is a constructor method for a DeleteApplicationsIDKeys response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteApplicationsIDKeysJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// DeleteApplicationsIDKeysJSON401Response is a constructor method for a DeleteApplicationsIDKeys response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteApplicationsIDKeysJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// DeleteApplicationsIDKeysJSON500Response is a constructor method for a DeleteApplicationsIDKeys response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteApplicationsIDKeysJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PostApplicationsIDKeysJSON200Response is a constructor method for a PostApplicationsIDKeys response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDKeysJSON200Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostApplicationsIDKeysJSON400Response is a constructor method for a PostApplicationsIDKeys response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDKeysJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostApplicationsIDKeysJSON401Response is a constructor method for a PostApplicationsIDKeys response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDKeysJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// PostApplicationsIDKeysJSON500Response is a constructor method for a PostApplicationsIDKeys response.
// A *Response is returned with the configured status code and content type from the spec.
func PostApplicationsIDKeysJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PostLoginJSON200Response is a constructor method for a PostLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLoginJSON200Response(body LoginResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostLoginJSON400Response is a constructor method for a PostLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLoginJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostLoginJSON401Response is a constructor method for a PostLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLoginJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// PostLoginJSON500Response is a constructor method for a PostLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLoginJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// GetUsersJSON200Response is a constructor method for a GetUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUsersJSON200Response(body []User) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetUsersJSON401Response is a constructor method for a GetUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUsersJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetUsersJSON500Response is a constructor method for a GetUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUsersJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PostUsersJSON201Response is a constructor method for a PostUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUsersJSON201Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostUsersJSON400Response is a constructor method for a PostUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUsersJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostUsersJSON401Response is a constructor method for a PostUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUsersJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// PostUsersJSON500Response is a constructor method for a PostUsers response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUsersJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PatchUsersByEmailJSON200Response is a constructor method for a PatchUsersByEmail response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchUsersByEmailJSON200Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PatchUsersByEmailJSON400Response is a constructor method for a PatchUsersByEmail response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchUsersByEmailJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PatchUsersByEmailJSON500Response is a constructor method for a PatchUsersByEmail response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchUsersByEmailJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lista todas as aplicações
	// (GET /applications)
	GetApplications(w http.ResponseWriter, r *http.Request) *Response
	// Cadastra uma aplicação
	// (POST /applications)
	PostApplications(w http.ResponseWriter, r *http.Request) *Response
	// Remove uma chave de permissão do cadastro da aplicação
	// (DELETE /applications/{id}/keys)
	DeleteApplicationsIDKeys(w http.ResponseWriter, r *http.Request, id string) *Response
	// Adiciona chaves de permissão no cadastro de uma aplicação
	// (POST /applications/{id}/keys)
	PostApplicationsIDKeys(w http.ResponseWriter, r *http.Request, id string) *Response
	// Autentica usuário
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request) *Response
	// Lista todos os usuários
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request) *Response
	// Cadastra um novo usuário
	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request) *Response
	// Atualiza o status de um usuário
	// (PATCH /users/{byEmail})
	PatchUsersByEmail(w http.ResponseWriter, r *http.Request, byEmail openapi_types.Email) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// GetApplications operation middleware
func (siw *ServerInterfaceWrapper) GetApplications(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetApplications(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostApplications operation middleware
func (siw *ServerInterfaceWrapper) PostApplications(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostApplications(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteApplicationsIDKeys operation middleware
func (siw *ServerInterfaceWrapper) DeleteApplicationsIDKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteApplicationsIDKeys(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostApplicationsIDKeys operation middleware
func (siw *ServerInterfaceWrapper) PostApplicationsIDKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostApplicationsIDKeys(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetUsers(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostUsers(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PatchUsersByEmail operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersByEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "byEmail" -------------
	var byEmail openapi_types.Email

	if err := runtime.BindStyledParameter("simple", false, "byEmail", chi.URLParam(r, "byEmail"), &byEmail); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "byEmail"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PatchUsersByEmail(w, r, byEmail)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/applications", wrapper.GetApplications)
		r.Post("/applications", wrapper.PostApplications)
		r.Delete("/applications/{id}/keys", wrapper.DeleteApplicationsIDKeys)
		r.Post("/applications/{id}/keys", wrapper.PostApplicationsIDKeys)
		r.Post("/login", wrapper.PostLogin)
		r.Get("/users", wrapper.GetUsers)
		r.Post("/users", wrapper.PostUsers)
		r.Patch("/users/{byEmail}", wrapper.PatchUsersByEmail)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ307juBd+lci/32WgMOxKq0pzURh2xTJaoWHQXjBcHOLT1kNiZ+yTQkF5mNVezBPs",
	"E/BiK9tpmpT0H7R00PYGUufYPj7n+44/Ow8sUkmqJEoyrP3ATNTHBNxjJ01jEQEJJe1P4FzYZ4jPtEpR",
	"k0DD2l2IDYYsrTQ9MMHt367SCRBrsywTnIWMhimyNjOkheyxPGQ3OPTmhIl7eGJRNIDWMLS/JSTYYJiH",
	"TOO3TGjkrH3J3GzOtJjjqhxJXX/FiOxQh2BE9AlNqqTBJdfXReTXEN3Md6W0bHLhSCNHSQJis6QDUE/N",
	"7EiH7G6np3bwjjTsEPTcCAOIBQeyZqW/1nlMQMS1MX3LiwZNwZhbpeuoKBufO3SYCPn+lzCBu/cH71g+",
	"GfpqjMJyFeWsTQk51lrpzWDhRBrUdFowYon5Jd6eLsejJVI3sYLRXM0LINQS4nPUA9QbjORH1RNy9cQO",
	"GakblPOd82bhbCf/wNvnl9fmKviCtNrx5nu5jpgutFM0lfd50b0wuCz+Vl36Qt89n7pvLVXoDjZXSYut",
	"dKESegYU9W3wzwkoW7aYmbLT/zV2WZv9rzWWJ61Cm7Qqw0+6WgzQ5NknTNQAT3G4pE83vseqyGaHa3Lv",
	"QkJGfaXFPfLNFM41Uma6dAtfnvMJeM6AQB2XKLPECYWIxMCOIGTxeNVUggxGmRY0PLce+eVfI2jUnYz6",
	"41+/jiLx+5+frTfOmrWLt+PI9IlSjw4hu8r252giLVK/IbBjk2IkuiKCx++P/6AJOASds5MgBQ2BCmwW",
	"d1By2wyuRD9+f/xbBV+YdceqyghI6S9s104pKLZz1l6xkA1QGz/b/u7e7p4NkUpRQipYmx24Jkt36rvV",
	"tiqKyjX0kOw/CwjXeMJZm/2G1Kna2Vz5fcP1ebe3Z/9FShJKmtCyra/Gb4Y+6zVNMwsc1a30yanBhrge",
	"2o/CEAQczDhyNsARcDCkgStjR/lpb38pT2eit0ruBo/q70P285JRmjV3kzBrcGFkFni7YGQ4Bj5rX9Yh",
	"f3mVX4XMZEkCeljGlZSLbD24FoSuStZ0uWFXdk9TpgFHZ8o8BdK3DA0dKj5cWXQmhNhEuSadYf4Ewftr",
	"mr0UWA3p6VQ4XgIVPE5Xh5Wp6DgEHhTh33LjOdw4KnIWZEmtYE8nRh7WK27rQfC8Nboz4Rgj4VPafHDt",
	"VeKcfHBnNlvINSRIqI3zVkgnHak/uixpe2VdR39YieTcC50F1abrntv4rIPRY523EJlXB6b6jVIDjI76",
	"MMBAW//Elrtvh7seUY65kUshxyBFnQhjbDnmZUVWE2psGrlH15ILb37/NQ5XbsN+TBIDF5E9Im1p/HZo",
	"3Cly5klsJlgsqyzGRbfpksl2t45VT7iVTye1u5xck5Stfk54ZdbU71wb0vdZ3aC0cYWM/AnUh3VLng2T",
	"Z8yOUWKCzGSPf2lRxbxB4y4KPM4z4/af6RcAF87gNU7+7s5q8SO/MuXqtuf91Z33lQmqka0Ax0NlttAZ",
	"o2Utx3sPkdc9189VERdFrCog3NbCN3iWD6QaqKaKOQJ+WS9bD9fD4wREnDuFABT1G+gw+npiDr3xQpL/",
	"urRdQPev6JvWupT/5PejH03+u3e27A3gXmxM/L9RAU4ZxOIeAhX4jzReaM+kT57/GwAA//+5nQIZoiQA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
