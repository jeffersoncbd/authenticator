// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package postgresql

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT email, name, password FROM users
WHERE
    email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(&i.Email, &i.Name, &i.Password)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users
    ( "email", "name", "password" ) VALUES
    ( $1, $2, $3 )
`

type InsertUserParams struct {
	Email    string
	Name     string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser, arg.Email, arg.Name, arg.Password)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT name, email FROM users
`

type ListUsersRow struct {
	Name  string
	Email string
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(&i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
